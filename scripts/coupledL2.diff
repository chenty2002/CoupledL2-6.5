diff --git a/src/main/scala/coupledL2/CoupledL2.scala b/src/main/scala/coupledL2/CoupledL2.scala
index 837476b..0f766cf 100644
--- a/src/main/scala/coupledL2/CoupledL2.scala
+++ b/src/main/scala/coupledL2/CoupledL2.scala
@@ -400,26 +400,33 @@ abstract class CoupledL2Base(implicit p: Parameters) extends LazyModule with Has
     val releaseSourceD = Wire(Vec(banks, Bool()))
     val allCanFire = (RegNextN(!hintFire, sliceAhead) && RegNextN(!hintFire, sliceAhead + 1)) || Cat(releaseSourceD).orR
 
+    def createSlice(enableCHI: Boolean,
+                    sliceId: Int,
+                    edgeIn: TLEdgeIn,
+                    edgeOut: TLEdgeOut): BaseSlice[_ <: BaseOuterBundle] = {
+      if (enableCHI) {
+        Module(new tl2chi.Slice()(p.alterPartial {
+          case EdgeInKey => edgeIn
+          case EdgeOutKey => edgeOut
+          case BankBitsKey => bankBits
+          case SliceIdKey => sliceId
+        }))
+      } else {
+        Module(new tl2tl.Slice()(p.alterPartial {
+          case EdgeInKey => edgeIn
+          case EdgeOutKey => edgeOut
+          case BankBitsKey => bankBits
+          case SliceIdKey => sliceId
+        }))
+      }
+    }
+
     val slices = node.in.zip(node.out).zipWithIndex.map {
       case (((in, edgeIn), (out, edgeOut)), i) =>
         require(in.params.dataBits == out.params.dataBits)
         val rst_L2 = reset
         val slice = withReset(rst_L2) {
-          if (enableCHI) {
-            Module(new tl2chi.Slice()(p.alterPartial {
-              case EdgeInKey => edgeIn
-              case EdgeOutKey => edgeOut
-              case BankBitsKey => bankBits
-              case SliceIdKey => i
-            }))
-          } else {
-            Module(new tl2tl.Slice()(p.alterPartial {
-              case EdgeInKey => edgeIn
-              case EdgeOutKey => edgeOut
-              case BankBitsKey => bankBits
-              case SliceIdKey => i
-            }))
-          }
+          createSlice(enableCHI, i, edgeIn, edgeOut)
         }
         slice.io.in <> in
         if (enableHintGuidedGrant) {
diff --git a/src/main/scala/coupledL2/tl2tl/MainPipe.scala b/src/main/scala/coupledL2/tl2tl/MainPipe.scala
index e5a4fd1..6ba6b6e 100644
--- a/src/main/scala/coupledL2/tl2tl/MainPipe.scala
+++ b/src/main/scala/coupledL2/tl2tl/MainPipe.scala
@@ -600,8 +600,8 @@ class MainPipe(implicit p: Parameters) extends L2Module with HasPerfEvents {
   io.toReqArb.blockB_s1 :=
     task_s2.valid && bBlock(task_s2.bits) ||
     task_s3.valid && bBlock(task_s3.bits) ||
-    task_s4.valid && bBlock(task_s4.bits, tag = true) ||
-    task_s5.valid && bBlock(task_s5.bits, tag = true)
+    task_s4.valid && bBlock(task_s4.bits, tag = true) && task_s4.bits.opcode(2, 1) === Grant(2, 1) ||
+    task_s5.valid && bBlock(task_s5.bits, tag = true) && task_s5.bits.opcode(2, 1) === Grant(2, 1) 
 
   io.toReqArb.blockA_s1 := false.B
 
